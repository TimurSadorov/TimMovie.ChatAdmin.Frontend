// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "chat.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Chat } from "./chat";
import type { Empty } from "./google/protobuf/empty";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { ChatEvent } from "./chat";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ChatMessage } from "./chat";
import type { AttachedClient } from "./chat";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service Chat
 */
export interface IChatClient {
    /**
     * @generated from protobuf rpc: ConnectUserToChat(AttachedClient) returns (stream ChatMessage);
     */
    connectUserToChat(input: AttachedClient, options?: RpcOptions): ServerStreamingCall<AttachedClient, ChatMessage>;
    /**
     * @generated from protobuf rpc: ConnectSupportToChat(AttachedClient) returns (stream ChatMessage);
     */
    connectSupportToChat(input: AttachedClient, options?: RpcOptions): ServerStreamingCall<AttachedClient, ChatMessage>;
    /**
     * @generated from protobuf rpc: ConnectToEvents(AttachedClient) returns (stream ChatEvent);
     */
    connectToEvents(input: AttachedClient, options?: RpcOptions): ServerStreamingCall<AttachedClient, ChatEvent>;
    /**
     * @generated from protobuf rpc: SendMessage(ChatMessage) returns (google.protobuf.Empty);
     */
    sendMessage(input: ChatMessage, options?: RpcOptions): UnaryCall<ChatMessage, Empty>;
    /**
     * @generated from protobuf rpc: DisconnectUserFromChat(AttachedClient) returns (google.protobuf.Empty);
     */
    disconnectUserFromChat(input: AttachedClient, options?: RpcOptions): UnaryCall<AttachedClient, Empty>;
    /**
     * @generated from protobuf rpc: DisconnectSupportFromChat(AttachedClient) returns (google.protobuf.Empty);
     */
    disconnectSupportFromChat(input: AttachedClient, options?: RpcOptions): UnaryCall<AttachedClient, Empty>;
}
/**
 * @generated from protobuf service Chat
 */
export class ChatClient implements IChatClient, ServiceInfo {
    typeName = Chat.typeName;
    methods = Chat.methods;
    options = Chat.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ConnectUserToChat(AttachedClient) returns (stream ChatMessage);
     */
    connectUserToChat(input: AttachedClient, options?: RpcOptions): ServerStreamingCall<AttachedClient, ChatMessage> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AttachedClient, ChatMessage>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConnectSupportToChat(AttachedClient) returns (stream ChatMessage);
     */
    connectSupportToChat(input: AttachedClient, options?: RpcOptions): ServerStreamingCall<AttachedClient, ChatMessage> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AttachedClient, ChatMessage>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConnectToEvents(AttachedClient) returns (stream ChatEvent);
     */
    connectToEvents(input: AttachedClient, options?: RpcOptions): ServerStreamingCall<AttachedClient, ChatEvent> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<AttachedClient, ChatEvent>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendMessage(ChatMessage) returns (google.protobuf.Empty);
     */
    sendMessage(input: ChatMessage, options?: RpcOptions): UnaryCall<ChatMessage, Empty> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChatMessage, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectUserFromChat(AttachedClient) returns (google.protobuf.Empty);
     */
    disconnectUserFromChat(input: AttachedClient, options?: RpcOptions): UnaryCall<AttachedClient, Empty> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<AttachedClient, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisconnectSupportFromChat(AttachedClient) returns (google.protobuf.Empty);
     */
    disconnectSupportFromChat(input: AttachedClient, options?: RpcOptions): UnaryCall<AttachedClient, Empty> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<AttachedClient, Empty>("unary", this._transport, method, opt, input);
    }
}
